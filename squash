#!/bin/bash

#
# Script to automate your git squash process
# 
# Thanasis Polychronakis
# thanpolas@gmail.com
#
###
### Configure
###
# Where is your git?
git=/usr/bin/git
# What is the branch we will get a fresh checkout from?
mbranch=upstream/master
# What is the remote we will push to?
originBranch=origin


###
### DO NOT EDIT BELOW THIS LINE
###

function checkerr {
	if [ $1 -ne 0 ]; then 
		echo "Error in execution:"
		echo $2
		exit $1
	fi
}

if [ -z $1 ]; then
	echo "Usage: squash [branch name] [optionaly set the checkout branch e.g. upstream/master]"
	exit
fi

if [ $2 ]; then
	mbranch=$2
else
	echo -n "Fresh checkout from [${mbranch}] - Enter to continue or type new name:"
	read newbranch;
	if [ ${newbranch} ]; then
		mbranch=$newbranch
	fi
fi

echo ${mbranch}

echo 'Starting squashing!'

# set temp branch name
tmpbranch="$1_tbs"

# execute renaming of branch to temp
echo "#1 Renaming target branch to temp"
ret=$(git branch -m $1 ${tmpbranch} 2>&1)
# Check if git executed successfuly 
checkerr $? "${ret}"

echo "#2 Checking out fresh copy from [${mbranch}]"
ret=$(git checkout ${mbranch} -b $1 2>&1)
checkerr $? "${ret}"

echo "#3 Merging temp branch to newly created one"
ret=$(git merge --squash ${tmpbranch} 2>&1)
checkerr $? "${ret}"


# Get files that have been modified or added
echo "#4 Checking for Modified and Added files"
retStatus=$(git status --porcelain 2>&1)
checkerr $? "${retStatus}"

# Go through all modified or added files
for EACH in `echo ${retStatus} |grep -o -e "[^\S+]*"`; do
	if [[ $EACH = "M" || $EACH == "A" ]]; then
		continue;
	elif [ $EACH = "??" ]; then
		# Stop loop if we find newly untracked changes
		break;
	fi
	
	echo "#5 Adding file: ${EACH}"
done

echo "#6 Commiting changes"
git commit

echo -n "Push branch to origin? Y/N:"
read wish;
if [ ${wish} = "Y" ]; then
	echo "#7 Pushing to ${originBranch}"
	ret=$(git push -ff ${originBranch} $1 2>&1)
	checkerr $? "${ret}"
fi

echo -n "Delete temp (original copy) branch? Y/N:"
read wish;
if [ ${wish} = "Y" ]; then
	echo "#8 Deleting temp branch"
	ret=$(git branch -D ${tmpbranch} 2>&1)
	checkerr $? "${ret}"
fi
echo "All done!"




